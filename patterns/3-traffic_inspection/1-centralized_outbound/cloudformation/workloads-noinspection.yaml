AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloud WAN centralized outbound (VPC & workloads)
Transform: 'AWS::LanguageExtensions'

Parameters:
  CoreNetworkArn:
    Type: String
  CoreNetworkId:
    Type: String
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

Mappings:
  ProdVpcCIDR:
    us-east-1:
      CIDR: 10.10.0.0/24
      EndpointSubneta: 10.10.0.0/28
      EndpointSubnetb: 10.10.0.16/28
      PrivateSubneta: 10.10.0.32/28
      PrivateSubnetb: 10.10.0.48/28
      CWANSubneta: 10.10.0.64/28
      CWANSubnetb: 10.10.0.80/28
    eu-west-1:
      CIDR: 10.0.0.0/24
      EndpointSubneta: 10.0.0.0/28
      EndpointSubnetb: 10.0.0.16/28
      PrivateSubneta: 10.0.0.32/28
      PrivateSubnetb: 10.0.0.48/28
      CWANSubneta: 10.0.0.64/28
      CWANSubnetb: 10.0.0.80/28
    us-west-2:
      CIDR: 10.20.0.0/24
      EndpointSubneta: 10.20.0.0/28
      EndpointSubnetb: 10.20.0.16/28
      PrivateSubneta: 10.20.0.32/28
      PrivateSubnetb: 10.20.0.48/28
      CWANSubneta: 10.20.0.64/28
      CWANSubnetb: 10.20.0.80/28
  DevVpcCIDR:
    us-east-1:
      CIDR: 10.10.1.0/24
      EndpointSubneta: 10.10.1.0/28
      EndpointSubnetb: 10.10.1.16/28
      PrivateSubneta: 10.10.1.32/28
      PrivateSubnetb: 10.10.1.48/28
      CWANSubneta: 10.10.1.64/28
      CWANSubnetb: 10.10.1.80/28
    eu-west-1:
      CIDR: 10.0.1.0/24
      EndpointSubneta: 10.0.1.0/28
      EndpointSubnetb: 10.0.1.16/28
      PrivateSubneta: 10.0.1.32/28
      PrivateSubnetb: 10.0.1.48/28
      CWANSubneta: 10.0.1.64/28
      CWANSubnetb: 10.0.1.80/28
    us-west-2:
      CIDR: 10.20.1.0/24
      EndpointSubneta: 10.20.1.0/28
      EndpointSubnetb: 10.20.1.16/28
      PrivateSubneta: 10.20.1.32/28
      PrivateSubnetb: 10.20.1.48/28
      CWANSubneta: 10.20.1.64/28
      CWANSubnetb: 10.20.1.80/28
  InspectionVpcCIDR:
    us-east-1:
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
      PublicSubneta: 10.100.0.64/28
      PublicSubnetb: 10.100.0.80/28
    eu-west-1:
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
      PublicSubneta: 10.100.0.64/28
      PublicSubnetb: 10.100.0.80/28
    us-west-2:
      CIDR: 10.100.0.0/16
      EndpointSubneta: 10.100.0.0/28
      EndpointSubnetb: 10.100.0.16/28
      CWANSubneta: 10.100.0.32/28
      CWANSubnetb: 10.100.0.48/28
      PublicSubneta: 10.100.0.64/28
      PublicSubnetb: 10.100.0.80/28

Resources:
  # ---------- PRODUCTION VPC ----------
  ProductionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ProdVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - prod-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::ProductionSubnetTypes':
    - SubnetType
    - [Endpoint, Private, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - 'Production${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref ProductionVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [ProdVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub prod-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          'Production${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref ProductionVPC
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub prod-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          'Production${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
              RouteTableId: !Ref
                'Fn::Sub': 'Production${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Production${SubnetType}Subnet${AvailabilityZone}'

  # For::Each iteration: per Availability Zone
  # VPC routes to 0.0.0.0/0 (via CWAN)
  'Fn::ForEach::ProductionVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'ProdDefaultToCWANRoute${AvailabilityZone}':
        DependsOn:
          - ProdCWANAttachment
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'ProductionPrivateRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          CoreNetworkArn: !Ref CoreNetworkArn

  # AWS Cloud WAN attachment
  ProdCWANAttachment:
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      SubnetArns:
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: ProductionCWANSubneta
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: ProductionCWANSubnetb
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - prod-attachment
              - !Ref AWS::StackName
              - !Ref AWS::Region
        - Key: domain
          Value: production
      VpcArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":ec2:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":vpc/"
            - Ref: ProductionVPC

  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCProdInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Production VPC - Instance Security Group
      VpcId: !Ref ProductionVPC

  VPCProdInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8

  VPCProdInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref VPCProdEndpointSecurityGroup

  VPCProdInstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdInstanceSecurityGroup
      Description: Allowing egress traffic
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  VPCProdEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Production VPC - Endpoints Security Group
      VpcId: !Ref ProductionVPC

  VPCProdEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCProdEndpointSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCProdInstanceSecurityGroup

  # # For::Each iteration: per AZ (2 AZs)
  # # EC2 Instances
  'Fn::ForEach::ProductionInstances':
    - AvailabilityZone
    - [a, b]
    - 'ProdInstance${AvailabilityZone}':
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t3.micro
          SecurityGroupIds:
            - !Ref VPCProdInstanceSecurityGroup
          SubnetId: !Ref
            'Fn::Sub': 'ProductionPrivateSubnet${AvailabilityZone}'
          ImageId: !Ref LatestAmiId
          Tags:
            - Key: Name
              Value: !Join
                - '-'
                - - !Sub prod-instance-${AvailabilityZone}
                  - !Ref AWS::StackName

  # EC2 Instance Connect Endpoint
  ProdEICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds:
        - !Ref VPCProdEndpointSecurityGroup
      SubnetId: !Ref ProductionEndpointSubneta
      Tags:
        - Key: Name
          Value : !Join
            - '-'
            - - !Sub prod-eic
              - !Ref AWS::StackName

  # ---------- DEVELOPMENT VPC ----------
  DevelopmentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [DevVpcCIDR, !Ref 'AWS::Region', CIDR]
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - dev-vpc
              - !Ref AWS::StackName
              - !Ref AWS::Region

  # For::Each iteration: per subnet type (Endpoint, Private, CWAN) and AZ (2 AZs)
  # Resources to create: 6 subnets, 6 route tables, 6 route table associations - obtaining AZ affinity
  'Fn::ForEach::DevelopmentSubnetTypes':
    - SubnetType
    - [Endpoint, Private, CWAN]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b]
          # Subnets
        - 'Development${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref DevelopmentVPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !FindInMap [DevVpcCIDR, !Ref 'AWS::Region', 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}']
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub dev-subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          'Development${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref DevelopmentVPC
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub dev-rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          'Development${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
              RouteTableId: !Ref
                'Fn::Sub': 'Development${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': 'Development${SubnetType}Subnet${AvailabilityZone}'

  # For::Each iteration: per Availability Zone
  # VPC routes to 0.0.0.0/0 (via CWAN)
  'Fn::ForEach::DevelopmentVPCRoutes':
    - AvailabilityZone
    - [a, b]
    - 'DevDefaultToCWANRoute${AvailabilityZone}':
        DependsOn:
          - DevCWANAttachment
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref
            'Fn::Sub': 'DevelopmentPrivateRouteTable${AvailabilityZone}'
          DestinationCidrBlock: '0.0.0.0/0'
          CoreNetworkArn: !Ref CoreNetworkArn

  # AWS Cloud WAN attachment
  DevCWANAttachment:
    Type: AWS::NetworkManager::VpcAttachment
    Properties:
      CoreNetworkId: !Ref CoreNetworkId
      SubnetArns:
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: DevelopmentCWANSubneta
        - Fn::Join:
            - ""
            - - "arn:aws:ec2:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":subnet/"
              - Ref: DevelopmentCWANSubnetb
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - dev-attachment
              - !Ref AWS::StackName
              - !Ref AWS::Region
        - Key: domain
          Value: development
      VpcArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":ec2:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":vpc/"
            - Ref: DevelopmentVPC

  # Security Groups (Instances and EC2 Instance Connect endpoint)
  VPCDevInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Development VPC - Instance Security Group
      VpcId: !Ref DevelopmentVPC

  VPCDevInstanceSecurityGroupIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCDevInstanceSecurityGroup
      Description: Allowing ICMP traffic
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 10.0.0.0/8

  VPCDevInstanceSecurityGroupIngressEIC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref VPCDevInstanceSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref VPCDevEndpointSecurityGroup

  VPCDevInstanceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCDevInstanceSecurityGroup
      Description: Allowing egress traffic
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  VPCDevEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Development VPC - Endpoints Security Group
      VpcId: !Ref DevelopmentVPC

  VPCDevEndpointSecurityGroupEgressEIC:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref VPCDevEndpointSecurityGroup
      Description: Allowing EIC connection
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref VPCDevInstanceSecurityGroup

  # # For::Each iteration: per AZ (2 AZs)
  # # EC2 Instances
  'Fn::ForEach::DevelopmentInstances':
    - AvailabilityZone
    - [a, b]
    - 'DevInstance${AvailabilityZone}':
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t3.micro
          SecurityGroupIds:
            - !Ref VPCDevInstanceSecurityGroup
          SubnetId: !Ref
            'Fn::Sub': 'DevelopmentPrivateSubnet${AvailabilityZone}'
          ImageId: !Ref LatestAmiId
          Tags:
            - Key: Name
              Value: !Join
                - '-'
                - - !Sub dev-instance-${AvailabilityZone}
                  - !Ref AWS::StackName

  # EC2 Instance Connect Endpoint
  DevEICEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: false
      SecurityGroupIds:
        - !Ref VPCDevEndpointSecurityGroup
      SubnetId: !Ref DevelopmentEndpointSubneta
      Tags:
        - Key: Name
          Value : !Join
            - '-'
            - - !Sub dev-eic
              - !Ref AWS::StackName
